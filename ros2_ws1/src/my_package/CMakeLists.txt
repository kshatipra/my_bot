cmake_minimum_required(VERSION 3.8)
project(my_package)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
# Add additional dependencies based on you
find_package(geometry_msgs REQUIRED)
# find_package(<additional_dependency> REQUIRED)

add_executable(follow_me_node src/follow_me_node.cpp)
target_include_directories(follow_me_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_features(follow_me_node PUBLIC c_std_99 cxx_std_17)

add_executable(obstacle_detection_node src/obstacle_detection_node.cpp)
target_include_directories(obstacle_detection_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_features(obstacle_detection_node PUBLIC c_std_99 cxx_std_17)

add_executable(leg_detection_node src/leg_detection_node.cpp)
target_include_directories(leg_detection_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_features(leg_detection_node PUBLIC c_std_99 cxx_std_17)

# Link additional dependencies if needed
# target_link_libraries(follow_me_node <additional_dependency_library>)
# target_link_libraries(obstacle_detection_node <additional_dependency_library>)
# target_link_libraries(leg_detection_node <additional_dependency_library>)

install(TARGETS
  follow_me_node
  obstacle_detection_node
  leg_detection_node
  DESTINATION lib/${PROJECT_NAME})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  set(ament_cmake_copyright_FOUND TRUE)
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
